
package com.tsystems.library.libservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 */
@WebService(name = "LibraryWS", targetNamespace = "http://libservice/")
@XmlSeeAlso({
        ObjectFactory.class
})
public interface LibraryWS {


    /**
     * @return returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserIds", targetNamespace = "http://libservice/", className = "libservice.GetUserIds")
    @ResponseWrapper(localName = "getUserIdsResponse", targetNamespace = "http://libservice/", className = "libservice.GetUserIdsResponse")
    @Action(input = "http://libservice/LibraryWS/getUserIdsRequest", output = "http://libservice/LibraryWS/getUserIdsResponse")
    public List<String> getUserIds();

    /**
     * @param arg0
     * @return returns libservice.User
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUser", targetNamespace = "http://libservice/", className = "libservice.GetUser")
    @ResponseWrapper(localName = "getUserResponse", targetNamespace = "http://libservice/", className = "libservice.GetUserResponse")
    @Action(input = "http://libservice/LibraryWS/getUserRequest", output = "http://libservice/LibraryWS/getUserResponse")
    public User getUser(
            @WebParam(name = "arg0", targetNamespace = "")
                    String arg0);

    /**
     * @param arg1
     * @param arg0
     * @return returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addUser", targetNamespace = "http://libservice/", className = "libservice.AddUser")
    @ResponseWrapper(localName = "addUserResponse", targetNamespace = "http://libservice/", className = "libservice.AddUserResponse")
    @Action(input = "http://libservice/LibraryWS/addUserRequest", output = "http://libservice/LibraryWS/addUserResponse")
    public boolean addUser(
            @WebParam(name = "arg0", targetNamespace = "")
                    String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
                    String arg1);

    /**
     * @param arg0
     * @return returns java.util.List<libservice.Book>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBooks", targetNamespace = "http://libservice/", className = "libservice.GetBooks")
    @ResponseWrapper(localName = "getBooksResponse", targetNamespace = "http://libservice/", className = "libservice.GetBooksResponse")
    @Action(input = "http://libservice/LibraryWS/getBooksRequest", output = "http://libservice/LibraryWS/getBooksResponse")
    public List<Book> getBooks(
            @WebParam(name = "arg0", targetNamespace = "")
                    Author arg0);

    /**
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "takeBook", targetNamespace = "http://libservice/", className = "libservice.TakeBook")
    @ResponseWrapper(localName = "takeBookResponse", targetNamespace = "http://libservice/", className = "libservice.TakeBookResponse")
    @Action(input = "http://libservice/LibraryWS/takeBookRequest", output = "http://libservice/LibraryWS/takeBookResponse")
    public void takeBook(
            @WebParam(name = "arg0", targetNamespace = "")
                    User arg0,
            @WebParam(name = "arg1", targetNamespace = "")
                    Book arg1);

    /**
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "returnBook", targetNamespace = "http://libservice/", className = "libservice.ReturnBook")
    @ResponseWrapper(localName = "returnBookResponse", targetNamespace = "http://libservice/", className = "libservice.ReturnBookResponse")
    @Action(input = "http://libservice/LibraryWS/returnBookRequest", output = "http://libservice/LibraryWS/returnBookResponse")
    public void returnBook(
            @WebParam(name = "arg0", targetNamespace = "")
                    User arg0,
            @WebParam(name = "arg1", targetNamespace = "")
                    Book arg1);

    /**
     * @param arg0
     * @return returns libservice.Book
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBook", targetNamespace = "http://libservice/", className = "libservice.GetBook")
    @ResponseWrapper(localName = "getBookResponse", targetNamespace = "http://libservice/", className = "libservice.GetBookResponse")
    @Action(input = "http://libservice/LibraryWS/getBookRequest", output = "http://libservice/LibraryWS/getBookResponse")
    public Book getBook(
            @WebParam(name = "arg0", targetNamespace = "")
                    Book arg0);

    /**
     * @return returns java.util.List<libservice.Author>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAuthors", targetNamespace = "http://libservice/", className = "libservice.GetAuthors")
    @ResponseWrapper(localName = "getAuthorsResponse", targetNamespace = "http://libservice/", className = "libservice.GetAuthorsResponse")
    @Action(input = "http://libservice/LibraryWS/getAuthorsRequest", output = "http://libservice/LibraryWS/getAuthorsResponse")
    public List<Author> getAuthors();

    /**
     * @param arg1
     * @param arg0
     * @return returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isWaiting", targetNamespace = "http://libservice/", className = "libservice.IsWaiting")
    @ResponseWrapper(localName = "isWaitingResponse", targetNamespace = "http://libservice/", className = "libservice.IsWaitingResponse")
    @Action(input = "http://libservice/LibraryWS/isWaitingRequest", output = "http://libservice/LibraryWS/isWaitingResponse")
    public boolean isWaiting(
            @WebParam(name = "arg0", targetNamespace = "")
                    User arg0,
            @WebParam(name = "arg1", targetNamespace = "")
                    Book arg1);

}
